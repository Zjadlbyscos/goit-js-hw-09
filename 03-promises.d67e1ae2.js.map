{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SAGA,MAAMC,EAAM,CACVC,KAAMC,SAASC,cAAc,SAC7BC,MAAOF,SAASC,cAAc,uBAC9BE,KAAMH,SAASC,cAAc,sBAC7BG,OAAQJ,SAASC,cAAc,yBAGjC,SAASI,EAAcC,EAAUJ,GAC/B,OAAO,IAAIK,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,KACLH,EACFF,EAAQ,C,SAAEF,E,MAAUJ,IAEpBO,EAAO,C,SAAEH,E,MAAUJ,GAAQ,GAE5BA,EAAM,G,CAIbJ,EAAIC,KAAKe,iBAAiB,UAE1B,SAA0BC,GACxBA,EAAEC,iBACF,IAAIC,EAAQC,SAASpB,EAAII,MAAMiB,OAC/B,MAAMhB,EAAOe,SAASpB,EAAIK,KAAKgB,OACzBf,EAASc,SAASpB,EAAIM,OAAOe,OAEnC,GAAIF,EAAQ,GAAKd,EAAO,GAAKC,EAAS,EACpCR,EAAAwB,OAAOC,QAAQ,oCAAC,CACdC,cAAc,EACdC,QAAS,IACTjB,SAAU,oBAGZ,IAAK,IAAIkB,EAAI,EAAGA,EAAIpB,EAAQoB,GAAK,EAAG,CAElCnB,EADemB,EAAI,EACKP,GACrBQ,MAAK,EAACnB,SAAEA,EAAQJ,MAAEA,MACjBN,EAAAwB,OAAOM,QAAQ,qBAAqBpB,QAAeJ,MAAW,CAC5DoB,cAAc,GACd,IAEHK,OAAM,EAACrB,SAAEA,EAAQJ,MAAEA,MAClBN,EAAAwB,OAAOQ,QAAQ,oBAAoBtB,QAAeJ,MAAW,CAC3DoB,cAAc,GACd,IAENL,GAASd,C","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport 'notiflix/dist/notiflix-3.2.6.min.css';\n\nconst obj = {\n  form: document.querySelector('.form'),\n  delay: document.querySelector('input[name=\"delay\"]'),\n  step: document.querySelector('input[name=\"step\"]'),\n  amount: document.querySelector('input[name=\"amount\"]'),\n};\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay); // Add delay argument to setTimeout\n  });\n}\n\nobj.form.addEventListener('submit', btnSubmitHandler);\n\nfunction btnSubmitHandler(e) {\n  e.preventDefault();\n  let delay = parseInt(obj.delay.value);\n  const step = parseInt(obj.step.value);\n  const amount = parseInt(obj.amount.value);\n\n  if (delay < 0 || step < 0 || amount < 1) {\n    Notify.warning(`❗ Fill in amount greater than 0 ❗`, {\n      clickToClose: true,\n      timeout: 3 * 1000,\n      position: 'center-top',\n    });\n  } else {\n    for (let i = 0; i < amount; i += 1) {\n      let position = i + 1;\n      createPromise(position, delay)\n        .then(({ position, delay }) => {\n          Notify.success(`Fulfilled promise ${position} in ${delay}ms`, {\n            clickToClose: true,\n          });\n        })\n        .catch(({ position, delay }) => {\n          Notify.failure(`Rejected promise ${position} in ${delay}ms`, {\n            clickToClose: true,\n          });\n        });\n      delay += step;\n    }\n  }\n}\n"],"names":["$iQIUW","parcelRequire","$47d4ff9957288465$var$obj","form","document","querySelector","delay","step","amount","$47d4ff9957288465$var$createPromise","position","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","addEventListener","e","preventDefault","delay1","parseInt","value","Notify","warning","clickToClose","timeout","i","then","success","catch","failure"],"version":3,"file":"03-promises.d67e1ae2.js.map"}